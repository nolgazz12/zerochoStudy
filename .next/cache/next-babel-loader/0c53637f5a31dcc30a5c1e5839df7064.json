{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, take, put, delay, debounce, throttle, takeLeading, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle('ADD_POST_REQUEST', addPost, 10000);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","call","take","put","delay","debounce","throttle","takeLeading","takeEvery","takeLatest","axios","addPostAPI","data","post","action","type","response"],"mappings":";;oDAQUA,O;qDAgBAC,Y;qDAIeC,Q;;AA5BzB,SAASC,GAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA4BC,IAA5B,EAAkCC,GAAlC,EAAwCC,KAAxC,EAAgDC,QAAhD,EAA0DC,QAA1D,EAAqEC,WAArE,EAAmFC,SAAnF,EAA+FC,UAA/F,QAAgH,oBAAhH;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,UAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUhB,OAAV,CAAkBkB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMV,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMD,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAG,kBADD;AAENH,YAAAA,IAAI,EAAGE,MAAM,CAACF;AAFR,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMT,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAG,kBADD;AAENH,YAAAA,IAAI,EAAG,YAAII,QAAJ,CAAaJ;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUf,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAMS,QAAQ,CAAC,kBAAD,EAAsBV,OAAtB,EAAgC,KAAhC,CAAd;;AADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAE,CACPC,IAAI,CAACH,YAAD,CADG,CAAF,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all , fork, call , take, put , delay , debounce, throttle , takeLeading , takeEvery , takeLatest} from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data) //요청의 결과를 받음\r\n        yield delay(1000)\r\n        yield put({\r\n            type : 'ADD_POST_SUCCESS',\r\n            data : action.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'ADD_POST_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n        yield throttle('ADD_POST_REQUEST' , addPost , 10000);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all ([\r\n        fork(watchAddPost)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}