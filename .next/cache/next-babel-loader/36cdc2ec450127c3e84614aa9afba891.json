{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'; // function logInAPI (data) {\n//     // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\n//         return axios.post('/api/login', data)\n//     }\n\nfunction* logIn(action) {\n  try {\n    // 현재는 서버가 없으니 주석\n    // const result = yield call(logInAPI , action.data) //요청의 결과를 받음\n    yield delay(1000); // axios.post('/api/login')\n    // .then((result) => {\n    //     yield put({\n    //         type : 'LOG_IN_SUCCESS',\n    //         data : result.data\n    //     })\n    // })\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n} // function logOutAPI () {\n//     return axios.post('/api/logout')\n// }\n\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI) //요청의 결과를 받음\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","logIn","action","type","data","err","response","logOut","result","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;;AAEI,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX,CAHD,CAIC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAME,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAG,gBADD;AAENC,MAAAA,IAAI,EAAGF,MAAM,CAACE;AAFR,KAAD,CAAT;AAIH,GAfD,CAeE,OAAQC,GAAR,EAAa;AACX,UAAMP,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAG,gBADD;AAENC,MAAAA,IAAI,EAAGC,GAAG,CAACC,QAAJ,CAAaF;AAFd,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;AACA;;;AAEA,UAAUG,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAG,iBADD;AAENC,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAPD,CAOE,OAAQC,GAAR,EAAa;AACX,UAAMP,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAG,iBADD;AAENC,MAAAA,IAAI,EAAGC,GAAG,CAACC,QAAJ,CAAaF;AAFd,KAAD,CAAT;AAIH;AACJ;;AAGL,UAAUK,UAAV,GAAuB;AACnB,QAAMV,UAAU,CAAC,gBAAD,EAAoBE,KAApB,CAAhB,CADmB,CACwB;AAC9C;;AAED,UAAUS,WAAV,GAAwB;AACpB,QAAMX,UAAU,CAAC,iBAAD,EAAoBQ,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMhB,GAAG,CAAC,CACNE,IAAI,CAACY,UAAD,CADE,EAENZ,IAAI,CAACa,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n// function logInAPI (data) {\r\n//     // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\r\n//         return axios.post('/api/login', data)\r\n//     }\r\n    \r\n    function* logIn(action) {\r\n        try{\r\n            // 현재는 서버가 없으니 주석\r\n            // const result = yield call(logInAPI , action.data) //요청의 결과를 받음\r\n            yield delay(1000)\r\n            // axios.post('/api/login')\r\n            // .then((result) => {\r\n            //     yield put({\r\n            //         type : 'LOG_IN_SUCCESS',\r\n            //         data : result.data\r\n            //     })\r\n            // })\r\n            yield put({\r\n                type : 'LOG_IN_SUCCESS',\r\n                data : action.data,\r\n            });\r\n        } catch  (err) {\r\n            yield put({\r\n                type : 'LOG_IN_FAILURE',\r\n                data : err.response.data,\r\n            })\r\n        }\r\n    }\r\n    \r\n    // function logOutAPI () {\r\n    //     return axios.post('/api/logout')\r\n    // }\r\n    \r\n    function* logOut() {\r\n        try{\r\n            // const result = yield call(logOutAPI) //요청의 결과를 받음\r\n            yield delay(1000)\r\n            yield put({\r\n                type : 'LOG_OUT_SUCCESS',\r\n                data : result.data\r\n            })\r\n        } catch  (err) {\r\n            yield put({\r\n                type : 'LOG_OUT_FAILURE',\r\n                data : err.response.data,\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST' , logIn) //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}