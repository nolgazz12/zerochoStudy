{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork } from \"redux-saga/effects\"; // function logInAPI (data) {\n//     // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\n//         return axios.post('/api/login', data)\n//     }\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","fork","action","delay","put","type","data","response","logOutAPI","axios","post","result","takeLatest"],"mappings":";;oDAQcA,K;qDA4BAC,M;qDAiBJC,U;qDAIAC,W;qDAIeC,Q;;AA7DzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B,C,CAGA;AACA;AACA;AACA;;AAEI,SAAUN,KAAV,CAAgBO,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAYQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAG,gBADD;AAENC,YAAAA,IAAI,EAAGJ,MAAM,CAACI;AAFR,WAAD,CAAT;;AAZR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBQ,iBAAMF,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAG,gBADD;AAENC,YAAAA,IAAI,EAAG,YAAIC,QAAJ,CAAaD;AAFd,WAAD,CAAT;;AAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,SAASE,SAAT,GAAsB;AAClB,SAAOC,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAAUd,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAG,iBADD;AAENC,YAAAA,IAAI,EAAGK,MAAM,CAACL;AAFR,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMF,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAG,iBADD;AAENC,YAAAA,IAAI,EAAG,aAAIC,QAAJ,CAAaD;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBJ,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMe,UAAU,CAAC,gBAAD,EAAoBjB,KAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMc,UAAU,CAAC,iBAAD,EAAoBhB,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACJ,UAAD,CADE,EAENI,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork } from \"redux-saga/effects\";\r\n\r\n\r\n// function logInAPI (data) {\r\n//     // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\r\n//         return axios.post('/api/login', data)\r\n//     }\r\n    \r\n    function* logIn(action) {\r\n        try{\r\n            // 현재는 서버가 없으니 주석\r\n            // const result = yield call(logInAPI , action.data) //요청의 결과를 받음\r\n            yield delay(1000)\r\n            // axios.post('/api/login')\r\n            // .then((result) => {\r\n            //     yield put({\r\n            //         type : 'LOG_IN_SUCCESS',\r\n            //         data : result.data\r\n            //     })\r\n            // })\r\n            yield put({\r\n                type : 'LOG_IN_SUCCESS',\r\n                data : action.data,\r\n            });\r\n        } catch  (err) {\r\n            yield put({\r\n                type : 'LOG_IN_FAILURE',\r\n                data : err.response.data,\r\n            })\r\n        }\r\n    }\r\n    \r\n    function logOutAPI () {\r\n        return axios.post('/api/logout')\r\n    }\r\n    \r\n    function* logOut() {\r\n        try{\r\n            // const result = yield call(logOutAPI) //요청의 결과를 받음\r\n            yield delay(1000)\r\n            yield put({\r\n                type : 'LOG_OUT_SUCCESS',\r\n                data : result.data\r\n            })\r\n        } catch  (err) {\r\n            yield put({\r\n                type : 'LOG_OUT_FAILURE',\r\n                data : err.response.data,\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST' , logIn) //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}