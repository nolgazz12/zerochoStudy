{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // 현재는 서버가 없으니 주석\n    // const result = yield call(logInAPI , action.data) //요청의 결과를 받음\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI) //요청의 결과를 받음\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","watchLogIn","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAmBC,IAAnB,EAAyB;AACrB;AACI,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAG,gBADD;AAENJ,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GARD,CAQE,OAAQK,GAAR,EAAa;AACX,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAG,gBADD;AAENJ,MAAAA,IAAI,EAAGK,GAAG,CAACC,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAsB;AAClB,SAAOT,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAG,iBADD;AAENJ,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAPD,CAOE,OAAQK,GAAR,EAAa;AACX,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAG,iBADD;AAENJ,MAAAA,IAAI,EAAGK,GAAG,CAACC,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,UAAV,GAAuB;AACnB,QAAMZ,UAAU,CAACa,cAAD,EAAiBR,KAAjB,CAAhB;AACH;;AAED,UAAUS,WAAV,GAAwB;AACpB,QAAMd,UAAU,CAACe,eAAD,EAAkBJ,MAAlB,CAAhB;AACH;;AAEL,eAAe,UAAUK,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACVE,IAAI,CAACc,UAAD,CADM,EAEVd,IAAI,CAACgB,WAAD,CAFM,CAAD,CAAT;AAIH","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI (data) {\r\n    // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\r\n        return axios.post('/api/login', data)\r\n    }\r\n    \r\n    function* logIn(action) {\r\n        try{\r\n            // 현재는 서버가 없으니 주석\r\n            // const result = yield call(logInAPI , action.data) //요청의 결과를 받음\r\n            yield delay(1000)\r\n            yield put({\r\n                type : 'LOG_IN_SUCCESS',\r\n                data : action.data,\r\n            });\r\n        } catch  (err) {\r\n            yield put({\r\n                type : 'LOG_IN_FAILURE',\r\n                data : err.response.data,\r\n            })\r\n        }\r\n    }\r\n    \r\n    function logOutAPI () {\r\n        return axios.post('/api/logout')\r\n    }\r\n    \r\n    function* logOut() {\r\n        try{\r\n            // const result = yield call(logOutAPI) //요청의 결과를 받음\r\n            yield delay(1000)\r\n            yield put({\r\n                type : 'LOG_OUT_SUCCESS',\r\n                data : action.data\r\n            })\r\n        } catch  (err) {\r\n            yield put({\r\n                type : 'LOG_OUT_FAILURE',\r\n                data : err.response.data,\r\n            })\r\n        }\r\n    }\r\n    \r\n    function* watchLogIn() {\r\n        yield takeLatest(LOG_IN_REQUEST, logIn);\r\n    }\r\n\r\n    function* watchLogOut() {\r\n        yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n    }\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}