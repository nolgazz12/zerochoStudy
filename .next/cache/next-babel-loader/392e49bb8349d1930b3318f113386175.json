{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  // if(typeof action === 'function') {\n  //   return action(dispatch, getState)\n  // }\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/store/configureStore.js"],"names":["createWrapper","composeWithDevTools","applyMiddleware","compose","createStore","createSagaMiddleware","rootSaga","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA+B,oBAA/B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACzE;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAND;;AAUA,MAAMG,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACE,QAAMY,WAAW,GAAG,CAACD,cAAD,EAAkBR,gBAAlB,CAApB;AACA,QAAMU,QAAQ,GAAG,QACff,OAAO,CAACD,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CADQ,GAEfhB,mBAAmB,CAACC,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAFrB;AAIA,QAAME,KAAK,GAAGf,WAAW,CAACG,OAAD,EAAWW,QAAX,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBf,QAAnB,CAAjB;AACA,SAAOa,KAAP;AACH,CAVD;;AAYA,MAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAE1CQ,EAAAA,KAAK;AAFqC,CAAjB,CAA7B;AAMA,eAAeD,OAAf","sourcesContent":["import { createWrapper }  from 'next-redux-wrapper'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\n\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from '../sagas'\r\nimport reducer from '../reducers';\r\n\r\nconst loggerMiddleware = ({ dispatch , getState}) => (next) => (action) => {\r\n  // if(typeof action === 'function') {\r\n  //   return action(dispatch, getState)\r\n  // }\r\n  console.log(action)\r\n  return next(action)\r\n}\r\n\r\n\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n    const middlewares = [sagaMiddleware , loggerMiddleware]\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(applyMiddleware(...middlewares),\r\n    );\r\n    const store = createStore(reducer , enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga)\r\n    return store;\r\n}\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n\r\n    debug : process.env.NODE_ENV === 'development'\r\n    \r\n})\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}