{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, take, put, delay, debounce, throttle } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\n  return axios.post('/api/login', data);\n}\n\ncall(logInAPI, action.data);\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/login');\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return take('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return take('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/index.js"],"names":["logIn","logOut","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","take","put","delay","debounce","throttle","logInAPI","data","axios","post","action","result","type","response","logOutAPI","addPostAPI"],"mappings":"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","sourcesContent":["import { all , fork, call , take, put , delay , debounce, throttle} from 'redux-saga/effects'\r\n\r\nfunction logInAPI (data) {\r\n// function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\ncall(logInAPI, action.data)\r\nfunction* logIn(action) {\r\n    try{\r\n        const result = yield call(logInAPI , action.data) //요청의 결과를 받음\r\n        // const result = yield call(logInAPI , action.data, a, b, c) 첫 번째 자리가 함수고 그 다음자리부터 그 함수에 대한 매개변수\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI () {\r\n    return axios.post('/api/login')\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        const result = yield call(logOutAPI) //요청의 결과를 받음\r\n        yield put({\r\n            type : 'LOG_OUT_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'LOG_OUT_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data) //요청의 결과를 받음\r\n        yield put({\r\n            type : 'ADD_POST_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'ADD_POST_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield take('LOG_IN_REQUEST' , logIn) //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield take('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield take('ADD_POST_REQUEST' , addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchAddPost)\r\n    ])\r\n\r\n}"]},"metadata":{},"sourceType":"module"}