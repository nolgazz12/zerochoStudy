{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, take, put } from 'redux-saga/effects';\n\nfunction logInAPI() {\n  return axios.post('/api/login');\n}\n\nfunction logIn() {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(logInAPI);\n\n        case 2:\n          result = _context.sent;\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take('LOG_IN', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take('LOG_OUT');\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('ADD_POST');\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/index.js"],"names":["logIn","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","take","put","logInAPI","axios","post","result","type","data"],"mappings":";;oDAMUA,K;qDASAC,U;qDAIAC,W;qDAIAC,Y;qDAQeC,Q;;AA/BzB,SAASC,GAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA4BC,IAA5B,EAAkCC,GAAlC,QAA6C,oBAA7C;;AAEA,SAASC,QAAT,GAAqB;AACjB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMO,IAAI,CAACG,QAAD,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAAA;AAGI,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAG,gBADD;AAENC,YAAAA,IAAI,EAAGF,MAAM,CAACE;AAFR,WAAD,CAAT;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,IAAI,CAAC,QAAD,EAAYR,KAAZ,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,IAAI,CAAC,SAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUL,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,IAAI,CAAC,UAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUJ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,EAGNI,IAAI,CAACH,YAAD,CAHE,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all , fork, call , take, put } from 'redux-saga/effects'\r\n\r\nfunction logInAPI () {\r\n    return axios.post('/api/login')\r\n}\r\n\r\nfunction* logIn() {\r\n \r\n    const result = yield call(logInAPI) //요청의 결과를 받음\r\n    yield put({\r\n        type : 'LOG_IN_SUCCESS',\r\n        data : result.data\r\n    })\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield take('LOG_IN' , logIn) //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield take('LOG_OUT');\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield take('ADD_POST');\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchAddPost)\r\n    ])\r\n\r\n}"]},"metadata":{},"sourceType":"module"}