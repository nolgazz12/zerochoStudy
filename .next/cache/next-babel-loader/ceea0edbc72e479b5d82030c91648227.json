{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactStudy\\\\react-nodebird\\\\prerpare\\\\front\\\\components\\\\postCard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Button, Card, Image, Popover, Content } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { useSelector } from \"react-redux\";\nimport PostImages from \"./postImages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me; // const id = me?.id; \n  //optional chaining 연산자 위를 해석하자면 me && me.id ==> me?.id \n  //me.id 가 있으면 me.id를 넣어주고 없으면undefined를 보여주는 애\n  // const { me }  = useSelector((state) => state.user)\n  //위에 있는 두 줄의 코딩을 바꿀 수도 있다.\n\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // 이렇게 씀으로써\n  // const id = useSelector((state) => state.user.me && state.user.me.id) 로 안써도 된다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 36\n      }, _this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(HeartOutlined, {}, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(MessageOutlined, {}, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 19\n        }, _this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 19\n        }, _this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }, _this)],\n      children: [/*#__PURE__*/_jsxDEV(Image, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(Buttons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(PostCard, \"PE3tl4l6iN2alSnz6YcNc3Suv0k=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  //shape 은 onject 를 구체적으로 해주기 위해\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/components/postCard.js"],"names":["React","PropTypes","Button","Card","Image","Popover","Content","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","useSelector","PostImages","PostCard","post","state","user","me","id","Images","images","User","propTypes","shape","number","object","content","string","createAt","Comments","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport { Button , Card, Image, Popover, Content } from \"antd\"\r\nimport {  RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons'\r\nimport { useSelector } from \"react-redux\"\r\nimport PostImages from \"./postImages\"\r\nconst PostCard = ({ post }) => {\r\n    const { me }  = useSelector((state) => state.user)\r\n    // const id = me?.id; \r\n    //optional chaining 연산자 위를 해석하자면 me && me.id ==> me?.id \r\n    //me.id 가 있으면 me.id를 넣어주고 없으면undefined를 보여주는 애\r\n    // const { me }  = useSelector((state) => state.user)\r\n    //위에 있는 두 줄의 코딩을 바꿀 수도 있다.\r\n\r\n    const id = useSelector((state) => state.user.me?.id)\r\n    // 이렇게 씀으로써\r\n\r\n    // const id = useSelector((state) => state.user.me && state.user.me.id) 로 안써도 된다.\r\n\r\n    return (\r\n        <div>\r\n          <Card\r\n          cover={post.Images[0] && <PostImages images={post.images}/>}\r\n          actions={[\r\n              <RetweetOutlined key=\"retweet\"/>,\r\n              <HeartOutlined key=\"heart\"/>,\r\n              <MessageOutlined key=\"comment\"/>,\r\n              <Popover key=\"more\" content={(\r\n                  <Button.Group>\r\n                      {id && post.User.id === id ?\r\n                       (<>\r\n                        <Button>수정</Button>\r\n                        <Button type='danger'>삭제</Button>\r\n                        </>\r\n                      ) :\r\n                        <Button>신고</Button>}\r\n                  </Button.Group>\r\n              )}>\r\n                  <EllipsisOutlined />\r\n              </Popover>\r\n          ]}\r\n          >\r\n              <Image />\r\n              <Content />\r\n              <Buttons></Buttons>\r\n          </Card>\r\n          {/* <CommentFrom />\r\n          <Comments /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    //shape 은 onject 를 구체적으로 해주기 위해\r\n    post : PropTypes.shape({\r\n        id : PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createAt: PropTypes.object,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard"]},"metadata":{},"sourceType":"module"}