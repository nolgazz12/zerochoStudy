{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      // if(typeof action === 'function') {\n      //   return action(dispatch, getState)\n      // }\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAcC,QAAd,QAAcA,QAAd;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACzE;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KANoD;AAAA,GAA5B;AAAA,CAAzB;;AAUA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACE,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAkBR,gBAAlB,CAApB;AACF,MAAMU,QAAQ,GAAG,QACbhB,OAAO,CAACF,eAAe,MAAf,SAAmBiB,WAAnB,CAAD,CADM,GAEbb,mBAAmB,CACnBJ,eAAe,MAAf,SAAmBiB,WAAnB,CADmB,CAFvB;AAKA,MAAME,KAAK,GAAGlB,WAAW,CAACK,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACD,CAXD;;AAaA,IAAMG,OAAO,GAAGnB,aAAa,CAACY,cAAD,EAAiB;AAE1CQ,EAAAA,KAAK;AAFqC,CAAjB,CAA7B;AAMA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst loggerMiddleware = ({ dispatch , getState}) => (next) => (action) => {\r\n  // if(typeof action === 'function') {\r\n  //   return action(dispatch, getState)\r\n  // }\r\n  console.log(action)\r\n  return next(action)\r\n}\r\n\r\n\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware , loggerMiddleware]\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(\r\n      applyMiddleware(...middlewares),\r\n    );\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n\r\n    debug : process.env.NODE_ENV === 'development'\r\n    \r\n})\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}