{"ast":null,"code":"import { all, fork, call, take, put, delay, debounce, throttle } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  // function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\n  return axios.post('/api/login', data);\n}\n\ncall(logInAPI, action.data);\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); //요청의 결과를 받음\n    // const result = yield call(logInAPI , action.data, a, b, c) 첫 번째 자리가 함수고 그 다음자리부터 그 함수에 대한 매개변수\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI); //요청의 결과를 받음\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); //요청의 결과를 받음\n\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take('LOG_IN_REQUEST', logIn); //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["D:/reactStudy/react-nodebird/prerpare/front/sagas/index.js"],"names":["all","fork","call","take","put","delay","debounce","throttle","logInAPI","data","axios","post","action","logIn","result","type","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA4BC,IAA5B,EAAkCC,GAAlC,EAAwCC,KAAxC,EAAgDC,QAAhD,EAA0DC,QAA1D,QAAyE,oBAAzE;;AAEA,SAASC,QAAT,CAAmBC,IAAnB,EAAyB;AACzB;AACI,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAEDP,IAAI,CAACM,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAJ;;AACA,UAAUI,KAAV,CAAgBD,MAAhB,EAAwB;AACpB,MAAG;AACC,UAAME,MAAM,GAAG,MAAMZ,IAAI,CAACM,QAAD,EAAYI,MAAM,CAACH,IAAnB,CAAzB,CADD,CACmD;AAClD;;AACA,UAAML,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,gBADD;AAENN,MAAAA,IAAI,EAAGK,MAAM,CAACL;AAFR,KAAD,CAAT;AAIH,GAPD,CAOE,OAAQO,GAAR,EAAa;AACX,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,gBADD;AAENN,MAAAA,IAAI,EAAGO,GAAG,CAACC,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAsB;AAClB,SAAOR,KAAK,CAACC,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAG;AACC,UAAML,MAAM,GAAG,MAAMZ,IAAI,CAACgB,SAAD,CAAzB,CADD,CACsC;;AACrC,UAAMd,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,iBADD;AAENN,MAAAA,IAAI,EAAGK,MAAM,CAACL;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAQO,GAAR,EAAa;AACX,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,iBADD;AAENN,MAAAA,IAAI,EAAGO,GAAG,CAACC,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,UAAT,CAAqBX,IAArB,EAA2B;AACvB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUY,OAAV,CAAkBT,MAAlB,EAA0B;AACtB,MAAG;AACC,UAAME,MAAM,GAAG,MAAMZ,IAAI,CAACkB,UAAD,EAAaR,MAAM,CAACH,IAApB,CAAzB,CADD,CACoD;;AACnD,UAAML,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,kBADD;AAENN,MAAAA,IAAI,EAAGK,MAAM,CAACL;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAQO,GAAR,EAAa;AACX,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAG,kBADD;AAENN,MAAAA,IAAI,EAAGO,GAAG,CAACC,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,UAAV,GAAuB;AACnB,QAAMnB,IAAI,CAAC,gBAAD,EAAoBU,KAApB,CAAV,CADmB,CACkB;AACxC;;AAED,UAAUU,WAAV,GAAwB;AACpB,QAAMpB,IAAI,CAAC,iBAAD,EAAoBgB,MAApB,CAAV;AACH;;AAED,UAAUK,YAAV,GAAyB;AACrB,QAAMrB,IAAI,CAAC,kBAAD,EAAsBkB,OAAtB,CAAV;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAEhC,QAAMzB,GAAG,CAAC,CACNC,IAAI,CAACqB,UAAD,CADE,EAENrB,IAAI,CAACsB,WAAD,CAFE,EAGNtB,IAAI,CAACuB,YAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["import { all , fork, call , take, put , delay , debounce, throttle} from 'redux-saga/effects'\r\n\r\nfunction logInAPI (data) {\r\n// function logInAPI (data, a, b, c) { 아래 result 부분에 들어 있는 call 한 함수와 매개변수를 data 부분에 넣어주어야 한다.\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\ncall(logInAPI, action.data)\r\nfunction* logIn(action) {\r\n    try{\r\n        const result = yield call(logInAPI , action.data) //요청의 결과를 받음\r\n        // const result = yield call(logInAPI , action.data, a, b, c) 첫 번째 자리가 함수고 그 다음자리부터 그 함수에 대한 매개변수\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI () {\r\n    return axios.post('/api/login')\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        const result = yield call(logOutAPI) //요청의 결과를 받음\r\n        yield put({\r\n            type : 'LOG_OUT_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'LOG_OUT_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data) //요청의 결과를 받음\r\n        yield put({\r\n            type : 'ADD_POST_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch  (err) {\r\n        yield put({\r\n            type : 'ADD_POST_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield take('LOG_IN_REQUEST' , logIn) //로그인이라는 액션이 실행될 때까지 기다리겠다. ==> take \r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield take('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield take('ADD_POST_REQUEST' , addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchAddPost)\r\n    ])\r\n\r\n}"]},"metadata":{},"sourceType":"module"}